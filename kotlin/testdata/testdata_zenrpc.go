// Code generated by zenrpc v2.2.12; DO NOT EDIT.

package testdata

import (
	"context"
	"encoding/json"

	"github.com/vmkteam/zenrpc/v2"
	"github.com/vmkteam/zenrpc/v2/smd"
)

var RPC = struct {
	ArithService struct{ Sum, Positive, DoSomething, DoSomethingV2, GetPoints, DoSomethingWithPoint, Multiply, CheckError, CheckZenRPCError, Divide, Pow, Pi, SumArray string }
}{
	ArithService: struct{ Sum, Positive, DoSomething, DoSomethingV2, GetPoints, DoSomethingWithPoint, Multiply, CheckError, CheckZenRPCError, Divide, Pow, Pi, SumArray string }{
		Sum:                  "sum",
		Positive:             "positive",
		DoSomething:          "dosomething",
		DoSomethingV2:        "dosomethingv2",
		GetPoints:            "getpoints",
		DoSomethingWithPoint: "dosomethingwithpoint",
		Multiply:             "multiply",
		CheckError:           "checkerror",
		CheckZenRPCError:     "checkzenrpcerror",
		Divide:               "divide",
		Pow:                  "pow",
		Pi:                   "pi",
		SumArray:             "sumarray",
	},
}

func (ArithService) SMD() smd.ServiceInfo {
	return smd.ServiceInfo{
		Methods: map[string]smd.Service{
			"Sum": {
				Description: `Sum sums two digits and returns error with error code as result and IP from context.`,
				Parameters: []smd.JSONSchema{
					{
						Name: "a",
						Type: smd.Integer,
					},
					{
						Name: "b",
						Type: smd.Integer,
					},
				},
				Returns: smd.JSONSchema{
					Type: smd.Boolean,
				},
			},
			"Positive": {
				Parameters: []smd.JSONSchema{},
				Returns: smd.JSONSchema{
					Type: smd.Boolean,
				},
			},
			"DoSomething": {
				Parameters: []smd.JSONSchema{},
			},
			"DoSomethingV2": {
				Parameters: []smd.JSONSchema{},
				Returns: smd.JSONSchema{
					Type:     smd.Object,
					TypeName: "ExternalData",
					Properties: smd.PropertyList{
						{
							Name: "name",
							Type: smd.String,
						},
					},
				},
			},
			"GetPoints": {
				Parameters: []smd.JSONSchema{},
				Returns: smd.JSONSchema{
					Type:     smd.Array,
					TypeName: "[]Point",
					Items: map[string]string{
						"$ref": "#/definitions/Point",
					},
					Definitions: map[string]smd.Definition{
						"Point": {
							Type: "object",
							Properties: smd.PropertyList{
								{
									Name:        "X",
									Description: `coordinate`,
									Type:        smd.Integer,
								},
								{
									Name:        "Y",
									Description: `coordinate`,
									Type:        smd.Integer,
								},
								{
									Name:        "id",
									Description: `version id - 1`,
									Type:        smd.Integer,
								},
								{
									Name:        "baseId",
									Description: `version id - 2`,
									Type:        smd.Integer,
								},
								{
									Name:        "secondID",
									Description: `version id - 3`,
									Type:        smd.Integer,
								},
								{
									Name:        "createdAt",
									Description: `version date - 1`,
									Type:        smd.String,
								},
								{
									Name:        "updatedAt",
									Description: `version date - 2`,
									Type:        smd.String,
								},
								{
									Name:        "manualChangedAt",
									Description: `version date - 3`,
									Type:        smd.String,
								},
								{
									Name:        "newLat",
									Description: `version group geo coordinate № - 1`,
									Type:        smd.Float,
								},
								{
									Name:        "newLon",
									Description: `version group geo coordinate № - 1`,
									Type:        smd.Float,
								},
								{
									Name:        "lat",
									Description: `version group geo coordinate № - 2`,
									Type:        smd.Float,
								},
								{
									Name:        "lon",
									Description: `version group geo coordinate № - 2`,
									Type:        smd.Float,
								},
								{
									Name:        "latitude",
									Description: `version group geo coordinate № - 3`,
									Type:        smd.Float,
								},
								{
									Name:        "longitude",
									Description: `version group geo coordinate № - 3`,
									Type:        smd.Float,
								},
								{
									Name:        "baseFloat",
									Description: `version group float - 1`,
									Type:        smd.Float,
								},
								{
									Name:        "secondFloat",
									Description: `version group float - 2`,
									Type:        smd.Float,
								},
								{
									Name:     "emptyString",
									Optional: true,
									Type:     smd.String,
								},
								{
									Name: "name",
									Type: smd.String,
								},
								{
									Name: "secondPoints",
									Type: smd.Array,
									Items: map[string]string{
										"$ref": "#/definitions/Point",
									},
								},
								{
									Name: "nextQuotient",
									Ref:  "#/definitions/Quotient",
									Type: smd.Object,
								},
								{
									Name:     "secondQuotient",
									Optional: true,
									Ref:      "#/definitions/Quotient",
									Type:     smd.Object,
								},
								{
									Name: "class",
									Type: smd.String,
								},
							},
						},
						"Quotient": {
							Type: "object",
							Properties: smd.PropertyList{
								{
									Name:        "Quo",
									Description: `Quo docs`,
									Type:        smd.Integer,
								},
								{
									Name:        "rem",
									Description: `Rem docs`,
									Type:        smd.Integer,
								},
								{
									Name: "baseRow",
									Type: smd.String,
								},
								{
									Name:     "rowNil",
									Optional: true,
									Type:     smd.String,
								},
								{
									Name: "data",
									Ref:  "#/definitions/CycleInitStruct",
									Type: smd.Object,
								},
							},
						},
						"CycleInitStruct": {
							Type: "object",
							Properties: smd.PropertyList{
								{
									Name: "isCycleInit",
									Type: smd.Boolean,
								},
							},
						},
					},
				},
			},
			"DoSomethingWithPoint": {
				Parameters: []smd.JSONSchema{
					{
						Name:     "p",
						Type:     smd.Object,
						TypeName: "Point",
						Properties: smd.PropertyList{
							{
								Name:        "X",
								Description: `coordinate`,
								Type:        smd.Integer,
							},
							{
								Name:        "Y",
								Description: `coordinate`,
								Type:        smd.Integer,
							},
							{
								Name:        "id",
								Description: `version id - 1`,
								Type:        smd.Integer,
							},
							{
								Name:        "baseId",
								Description: `version id - 2`,
								Type:        smd.Integer,
							},
							{
								Name:        "secondID",
								Description: `version id - 3`,
								Type:        smd.Integer,
							},
							{
								Name:        "createdAt",
								Description: `version date - 1`,
								Type:        smd.String,
							},
							{
								Name:        "updatedAt",
								Description: `version date - 2`,
								Type:        smd.String,
							},
							{
								Name:        "manualChangedAt",
								Description: `version date - 3`,
								Type:        smd.String,
							},
							{
								Name:        "newLat",
								Description: `version group geo coordinate № - 1`,
								Type:        smd.Float,
							},
							{
								Name:        "newLon",
								Description: `version group geo coordinate № - 1`,
								Type:        smd.Float,
							},
							{
								Name:        "lat",
								Description: `version group geo coordinate № - 2`,
								Type:        smd.Float,
							},
							{
								Name:        "lon",
								Description: `version group geo coordinate № - 2`,
								Type:        smd.Float,
							},
							{
								Name:        "latitude",
								Description: `version group geo coordinate № - 3`,
								Type:        smd.Float,
							},
							{
								Name:        "longitude",
								Description: `version group geo coordinate № - 3`,
								Type:        smd.Float,
							},
							{
								Name:        "baseFloat",
								Description: `version group float - 1`,
								Type:        smd.Float,
							},
							{
								Name:        "secondFloat",
								Description: `version group float - 2`,
								Type:        smd.Float,
							},
							{
								Name:     "emptyString",
								Optional: true,
								Type:     smd.String,
							},
							{
								Name: "name",
								Type: smd.String,
							},
							{
								Name: "secondPoints",
								Type: smd.Array,
								Items: map[string]string{
									"$ref": "#/definitions/Point",
								},
							},
							{
								Name: "nextQuotient",
								Ref:  "#/definitions/Quotient",
								Type: smd.Object,
							},
							{
								Name:     "secondQuotient",
								Optional: true,
								Ref:      "#/definitions/Quotient",
								Type:     smd.Object,
							},
							{
								Name: "class",
								Type: smd.String,
							},
						},
						Definitions: map[string]smd.Definition{
							"Point": {
								Type: "object",
								Properties: smd.PropertyList{
									{
										Name:        "X",
										Description: `coordinate`,
										Type:        smd.Integer,
									},
									{
										Name:        "Y",
										Description: `coordinate`,
										Type:        smd.Integer,
									},
									{
										Name:        "id",
										Description: `version id - 1`,
										Type:        smd.Integer,
									},
									{
										Name:        "baseId",
										Description: `version id - 2`,
										Type:        smd.Integer,
									},
									{
										Name:        "secondID",
										Description: `version id - 3`,
										Type:        smd.Integer,
									},
									{
										Name:        "createdAt",
										Description: `version date - 1`,
										Type:        smd.String,
									},
									{
										Name:        "updatedAt",
										Description: `version date - 2`,
										Type:        smd.String,
									},
									{
										Name:        "manualChangedAt",
										Description: `version date - 3`,
										Type:        smd.String,
									},
									{
										Name:        "newLat",
										Description: `version group geo coordinate № - 1`,
										Type:        smd.Float,
									},
									{
										Name:        "newLon",
										Description: `version group geo coordinate № - 1`,
										Type:        smd.Float,
									},
									{
										Name:        "lat",
										Description: `version group geo coordinate № - 2`,
										Type:        smd.Float,
									},
									{
										Name:        "lon",
										Description: `version group geo coordinate № - 2`,
										Type:        smd.Float,
									},
									{
										Name:        "latitude",
										Description: `version group geo coordinate № - 3`,
										Type:        smd.Float,
									},
									{
										Name:        "longitude",
										Description: `version group geo coordinate № - 3`,
										Type:        smd.Float,
									},
									{
										Name:        "baseFloat",
										Description: `version group float - 1`,
										Type:        smd.Float,
									},
									{
										Name:        "secondFloat",
										Description: `version group float - 2`,
										Type:        smd.Float,
									},
									{
										Name:     "emptyString",
										Optional: true,
										Type:     smd.String,
									},
									{
										Name: "name",
										Type: smd.String,
									},
									{
										Name: "secondPoints",
										Type: smd.Array,
										Items: map[string]string{
											"$ref": "#/definitions/Point",
										},
									},
									{
										Name: "nextQuotient",
										Ref:  "#/definitions/Quotient",
										Type: smd.Object,
									},
									{
										Name:     "secondQuotient",
										Optional: true,
										Ref:      "#/definitions/Quotient",
										Type:     smd.Object,
									},
									{
										Name: "class",
										Type: smd.String,
									},
								},
							},
							"Quotient": {
								Type: "object",
								Properties: smd.PropertyList{
									{
										Name:        "Quo",
										Description: `Quo docs`,
										Type:        smd.Integer,
									},
									{
										Name:        "rem",
										Description: `Rem docs`,
										Type:        smd.Integer,
									},
									{
										Name: "baseRow",
										Type: smd.String,
									},
									{
										Name:     "rowNil",
										Optional: true,
										Type:     smd.String,
									},
									{
										Name: "data",
										Ref:  "#/definitions/CycleInitStruct",
										Type: smd.Object,
									},
								},
							},
							"CycleInitStruct": {
								Type: "object",
								Properties: smd.PropertyList{
									{
										Name: "isCycleInit",
										Type: smd.Boolean,
									},
								},
							},
						},
					},
					{
						Name:     "pp",
						Type:     smd.Array,
						TypeName: "[]Point",
						Items: map[string]string{
							"$ref": "#/definitions/Point",
						},
						Definitions: map[string]smd.Definition{
							"Point": {
								Type: "object",
								Properties: smd.PropertyList{
									{
										Name:        "X",
										Description: `coordinate`,
										Type:        smd.Integer,
									},
									{
										Name:        "Y",
										Description: `coordinate`,
										Type:        smd.Integer,
									},
									{
										Name:        "id",
										Description: `version id - 1`,
										Type:        smd.Integer,
									},
									{
										Name:        "baseId",
										Description: `version id - 2`,
										Type:        smd.Integer,
									},
									{
										Name:        "secondID",
										Description: `version id - 3`,
										Type:        smd.Integer,
									},
									{
										Name:        "createdAt",
										Description: `version date - 1`,
										Type:        smd.String,
									},
									{
										Name:        "updatedAt",
										Description: `version date - 2`,
										Type:        smd.String,
									},
									{
										Name:        "manualChangedAt",
										Description: `version date - 3`,
										Type:        smd.String,
									},
									{
										Name:        "newLat",
										Description: `version group geo coordinate № - 1`,
										Type:        smd.Float,
									},
									{
										Name:        "newLon",
										Description: `version group geo coordinate № - 1`,
										Type:        smd.Float,
									},
									{
										Name:        "lat",
										Description: `version group geo coordinate № - 2`,
										Type:        smd.Float,
									},
									{
										Name:        "lon",
										Description: `version group geo coordinate № - 2`,
										Type:        smd.Float,
									},
									{
										Name:        "latitude",
										Description: `version group geo coordinate № - 3`,
										Type:        smd.Float,
									},
									{
										Name:        "longitude",
										Description: `version group geo coordinate № - 3`,
										Type:        smd.Float,
									},
									{
										Name:        "baseFloat",
										Description: `version group float - 1`,
										Type:        smd.Float,
									},
									{
										Name:        "secondFloat",
										Description: `version group float - 2`,
										Type:        smd.Float,
									},
									{
										Name:     "emptyString",
										Optional: true,
										Type:     smd.String,
									},
									{
										Name: "name",
										Type: smd.String,
									},
									{
										Name: "secondPoints",
										Type: smd.Array,
										Items: map[string]string{
											"$ref": "#/definitions/Point",
										},
									},
									{
										Name: "nextQuotient",
										Ref:  "#/definitions/Quotient",
										Type: smd.Object,
									},
									{
										Name:     "secondQuotient",
										Optional: true,
										Ref:      "#/definitions/Quotient",
										Type:     smd.Object,
									},
									{
										Name: "class",
										Type: smd.String,
									},
								},
							},
							"Quotient": {
								Type: "object",
								Properties: smd.PropertyList{
									{
										Name:        "Quo",
										Description: `Quo docs`,
										Type:        smd.Integer,
									},
									{
										Name:        "rem",
										Description: `Rem docs`,
										Type:        smd.Integer,
									},
									{
										Name: "baseRow",
										Type: smd.String,
									},
									{
										Name:     "rowNil",
										Optional: true,
										Type:     smd.String,
									},
									{
										Name: "data",
										Ref:  "#/definitions/CycleInitStruct",
										Type: smd.Object,
									},
								},
							},
							"CycleInitStruct": {
								Type: "object",
								Properties: smd.PropertyList{
									{
										Name: "isCycleInit",
										Type: smd.Boolean,
									},
								},
							},
						},
					},
				},
				Returns: smd.JSONSchema{
					Description: `Point test description in return`,
					Type:        smd.Object,
					TypeName:    "Point",
					Properties: smd.PropertyList{
						{
							Name:        "X",
							Description: `coordinate`,
							Type:        smd.Integer,
						},
						{
							Name:        "Y",
							Description: `coordinate`,
							Type:        smd.Integer,
						},
						{
							Name:        "id",
							Description: `version id - 1`,
							Type:        smd.Integer,
						},
						{
							Name:        "baseId",
							Description: `version id - 2`,
							Type:        smd.Integer,
						},
						{
							Name:        "secondID",
							Description: `version id - 3`,
							Type:        smd.Integer,
						},
						{
							Name:        "createdAt",
							Description: `version date - 1`,
							Type:        smd.String,
						},
						{
							Name:        "updatedAt",
							Description: `version date - 2`,
							Type:        smd.String,
						},
						{
							Name:        "manualChangedAt",
							Description: `version date - 3`,
							Type:        smd.String,
						},
						{
							Name:        "newLat",
							Description: `version group geo coordinate № - 1`,
							Type:        smd.Float,
						},
						{
							Name:        "newLon",
							Description: `version group geo coordinate № - 1`,
							Type:        smd.Float,
						},
						{
							Name:        "lat",
							Description: `version group geo coordinate № - 2`,
							Type:        smd.Float,
						},
						{
							Name:        "lon",
							Description: `version group geo coordinate № - 2`,
							Type:        smd.Float,
						},
						{
							Name:        "latitude",
							Description: `version group geo coordinate № - 3`,
							Type:        smd.Float,
						},
						{
							Name:        "longitude",
							Description: `version group geo coordinate № - 3`,
							Type:        smd.Float,
						},
						{
							Name:        "baseFloat",
							Description: `version group float - 1`,
							Type:        smd.Float,
						},
						{
							Name:        "secondFloat",
							Description: `version group float - 2`,
							Type:        smd.Float,
						},
						{
							Name:     "emptyString",
							Optional: true,
							Type:     smd.String,
						},
						{
							Name: "name",
							Type: smd.String,
						},
						{
							Name: "secondPoints",
							Type: smd.Array,
							Items: map[string]string{
								"$ref": "#/definitions/Point",
							},
						},
						{
							Name: "nextQuotient",
							Ref:  "#/definitions/Quotient",
							Type: smd.Object,
						},
						{
							Name:     "secondQuotient",
							Optional: true,
							Ref:      "#/definitions/Quotient",
							Type:     smd.Object,
						},
						{
							Name: "class",
							Type: smd.String,
						},
					},
					Definitions: map[string]smd.Definition{
						"Point": {
							Type: "object",
							Properties: smd.PropertyList{
								{
									Name:        "X",
									Description: `coordinate`,
									Type:        smd.Integer,
								},
								{
									Name:        "Y",
									Description: `coordinate`,
									Type:        smd.Integer,
								},
								{
									Name:        "id",
									Description: `version id - 1`,
									Type:        smd.Integer,
								},
								{
									Name:        "baseId",
									Description: `version id - 2`,
									Type:        smd.Integer,
								},
								{
									Name:        "secondID",
									Description: `version id - 3`,
									Type:        smd.Integer,
								},
								{
									Name:        "createdAt",
									Description: `version date - 1`,
									Type:        smd.String,
								},
								{
									Name:        "updatedAt",
									Description: `version date - 2`,
									Type:        smd.String,
								},
								{
									Name:        "manualChangedAt",
									Description: `version date - 3`,
									Type:        smd.String,
								},
								{
									Name:        "newLat",
									Description: `version group geo coordinate № - 1`,
									Type:        smd.Float,
								},
								{
									Name:        "newLon",
									Description: `version group geo coordinate № - 1`,
									Type:        smd.Float,
								},
								{
									Name:        "lat",
									Description: `version group geo coordinate № - 2`,
									Type:        smd.Float,
								},
								{
									Name:        "lon",
									Description: `version group geo coordinate № - 2`,
									Type:        smd.Float,
								},
								{
									Name:        "latitude",
									Description: `version group geo coordinate № - 3`,
									Type:        smd.Float,
								},
								{
									Name:        "longitude",
									Description: `version group geo coordinate № - 3`,
									Type:        smd.Float,
								},
								{
									Name:        "baseFloat",
									Description: `version group float - 1`,
									Type:        smd.Float,
								},
								{
									Name:        "secondFloat",
									Description: `version group float - 2`,
									Type:        smd.Float,
								},
								{
									Name:     "emptyString",
									Optional: true,
									Type:     smd.String,
								},
								{
									Name: "name",
									Type: smd.String,
								},
								{
									Name: "secondPoints",
									Type: smd.Array,
									Items: map[string]string{
										"$ref": "#/definitions/Point",
									},
								},
								{
									Name: "nextQuotient",
									Ref:  "#/definitions/Quotient",
									Type: smd.Object,
								},
								{
									Name:     "secondQuotient",
									Optional: true,
									Ref:      "#/definitions/Quotient",
									Type:     smd.Object,
								},
								{
									Name: "class",
									Type: smd.String,
								},
							},
						},
						"Quotient": {
							Type: "object",
							Properties: smd.PropertyList{
								{
									Name:        "Quo",
									Description: `Quo docs`,
									Type:        smd.Integer,
								},
								{
									Name:        "rem",
									Description: `Rem docs`,
									Type:        smd.Integer,
								},
								{
									Name: "baseRow",
									Type: smd.String,
								},
								{
									Name:     "rowNil",
									Optional: true,
									Type:     smd.String,
								},
								{
									Name: "data",
									Ref:  "#/definitions/CycleInitStruct",
									Type: smd.Object,
								},
							},
						},
						"CycleInitStruct": {
							Type: "object",
							Properties: smd.PropertyList{
								{
									Name: "isCycleInit",
									Type: smd.Boolean,
								},
							},
						},
					},
				},
			},
			"Multiply": {
				Description: `Multiply multiples two digits and returns result.`,
				Parameters: []smd.JSONSchema{
					{
						Name: "a",
						Type: smd.Integer,
					},
					{
						Name: "b",
						Type: smd.Integer,
					},
				},
				Returns: smd.JSONSchema{
					Type: smd.Integer,
				},
			},
			"CheckError": {
				Description: `CheckError throws error is isErr true.
TEST row 2`,
				Parameters: []smd.JSONSchema{
					{
						Name: "isErr",
						Type: smd.Boolean,
					},
				},
				Errors: map[int]string{
					500: "test error",
				},
			},
			"CheckZenRPCError": {
				Description: `CheckZenRPCError throws zenrpc error is isErr true.
Second description row`,
				Parameters: []smd.JSONSchema{
					{
						Name: "isErr",
						Type: smd.Boolean,
					},
				},
				Errors: map[int]string{
					500: "test error",
				},
			},
			"Divide": {
				Description: `Divide divides two numbers.`,
				Parameters: []smd.JSONSchema{
					{
						Name:        "a",
						Description: `the a`,
						Type:        smd.Integer,
					},
					{
						Name:        "b",
						Description: `the b`,
						Type:        smd.Integer,
					},
				},
				Returns: smd.JSONSchema{
					Optional: true,
					Type:     smd.Object,
					TypeName: "Quotient",
					Properties: smd.PropertyList{
						{
							Name:        "Quo",
							Description: `Quo docs`,
							Type:        smd.Integer,
						},
						{
							Name:        "rem",
							Description: `Rem docs`,
							Type:        smd.Integer,
						},
						{
							Name: "baseRow",
							Type: smd.String,
						},
						{
							Name:     "rowNil",
							Optional: true,
							Type:     smd.String,
						},
						{
							Name: "data",
							Ref:  "#/definitions/CycleInitStruct",
							Type: smd.Object,
						},
					},
					Definitions: map[string]smd.Definition{
						"CycleInitStruct": {
							Type: "object",
							Properties: smd.PropertyList{
								{
									Name: "isCycleInit",
									Type: smd.Boolean,
								},
							},
						},
					},
				},
				Errors: map[int]string{
					401: "we do not serve 1",
				},
			},
			"Pow": {
				Description: `Pow returns x**y, the base-x exponential of y. If Exp is not set then default value is 2.`,
				Parameters: []smd.JSONSchema{
					{
						Name: "base",
						Type: smd.Float,
					},
					{
						Name:        "exp",
						Optional:    true,
						Description: `exponent could be empty`,
						Type:        smd.Float,
					},
				},
				Returns: smd.JSONSchema{
					Type: smd.Float,
				},
			},
			"Pi": {
				Description: `Pi returns math.Pi.`,
				Parameters:  []smd.JSONSchema{},
				Returns: smd.JSONSchema{
					Type: smd.Float,
				},
			},
			"SumArray": {
				Description: `SumArray returns sum all items from array`,
				Parameters: []smd.JSONSchema{
					{
						Name:     "array",
						Optional: true,
						Type:     smd.Array,
						TypeName: "[]",
						Items: map[string]string{
							"type": smd.Float,
						},
					},
				},
				Returns: smd.JSONSchema{
					Type: smd.Float,
				},
			},
		},
	}
}

// Invoke is as generated code from zenrpc cmd
func (s ArithService) Invoke(ctx context.Context, method string, params json.RawMessage) zenrpc.Response {
	resp := zenrpc.Response{}
	var err error

	switch method {
	case RPC.ArithService.Sum:
		var args = struct {
			A int `json:"a"`
			B int `json:"b"`
		}{}

		if zenrpc.IsArray(params) {
			if params, err = zenrpc.ConvertToObject([]string{"a", "b"}, params); err != nil {
				return zenrpc.NewResponseError(nil, zenrpc.InvalidParams, "", err.Error())
			}
		}

		if len(params) > 0 {
			if err := json.Unmarshal(params, &args); err != nil {
				return zenrpc.NewResponseError(nil, zenrpc.InvalidParams, "", err.Error())
			}
		}

		resp.Set(s.Sum(ctx, args.A, args.B))

	case RPC.ArithService.Positive:
		resp.Set(s.Positive())

	case RPC.ArithService.DoSomething:
		s.DoSomething()

	case RPC.ArithService.DoSomethingV2:
		resp.Set(s.DoSomethingV2())

	case RPC.ArithService.GetPoints:
		resp.Set(s.GetPoints())

	case RPC.ArithService.DoSomethingWithPoint:
		var args = struct {
			P  Point   `json:"p"`
			Pp []Point `json:"pp"`
		}{}

		if zenrpc.IsArray(params) {
			if params, err = zenrpc.ConvertToObject([]string{"p", "pp"}, params); err != nil {
				return zenrpc.NewResponseError(nil, zenrpc.InvalidParams, "", err.Error())
			}
		}

		if len(params) > 0 {
			if err := json.Unmarshal(params, &args); err != nil {
				return zenrpc.NewResponseError(nil, zenrpc.InvalidParams, "", err.Error())
			}
		}

		resp.Set(s.DoSomethingWithPoint(args.P, args.Pp))

	case RPC.ArithService.Multiply:
		var args = struct {
			A int `json:"a"`
			B int `json:"b"`
		}{}

		if zenrpc.IsArray(params) {
			if params, err = zenrpc.ConvertToObject([]string{"a", "b"}, params); err != nil {
				return zenrpc.NewResponseError(nil, zenrpc.InvalidParams, "", err.Error())
			}
		}

		if len(params) > 0 {
			if err := json.Unmarshal(params, &args); err != nil {
				return zenrpc.NewResponseError(nil, zenrpc.InvalidParams, "", err.Error())
			}
		}

		resp.Set(s.Multiply(args.A, args.B))

	case RPC.ArithService.CheckError:
		var args = struct {
			IsErr bool `json:"isErr"`
		}{}

		if zenrpc.IsArray(params) {
			if params, err = zenrpc.ConvertToObject([]string{"isErr"}, params); err != nil {
				return zenrpc.NewResponseError(nil, zenrpc.InvalidParams, "", err.Error())
			}
		}

		if len(params) > 0 {
			if err := json.Unmarshal(params, &args); err != nil {
				return zenrpc.NewResponseError(nil, zenrpc.InvalidParams, "", err.Error())
			}
		}

		resp.Set(s.CheckError(args.IsErr))

	case RPC.ArithService.CheckZenRPCError:
		var args = struct {
			IsErr bool `json:"isErr"`
		}{}

		if zenrpc.IsArray(params) {
			if params, err = zenrpc.ConvertToObject([]string{"isErr"}, params); err != nil {
				return zenrpc.NewResponseError(nil, zenrpc.InvalidParams, "", err.Error())
			}
		}

		if len(params) > 0 {
			if err := json.Unmarshal(params, &args); err != nil {
				return zenrpc.NewResponseError(nil, zenrpc.InvalidParams, "", err.Error())
			}
		}

		resp.Set(s.CheckZenRPCError(args.IsErr))

	case RPC.ArithService.Divide:
		var args = struct {
			A int `json:"a"`
			B int `json:"b"`
		}{}

		if zenrpc.IsArray(params) {
			if params, err = zenrpc.ConvertToObject([]string{"a", "b"}, params); err != nil {
				return zenrpc.NewResponseError(nil, zenrpc.InvalidParams, "", err.Error())
			}
		}

		if len(params) > 0 {
			if err := json.Unmarshal(params, &args); err != nil {
				return zenrpc.NewResponseError(nil, zenrpc.InvalidParams, "", err.Error())
			}
		}

		resp.Set(s.Divide(args.A, args.B))

	case RPC.ArithService.Pow:
		var args = struct {
			Base float64  `json:"base"`
			Exp  *float64 `json:"exp"`
		}{}

		if zenrpc.IsArray(params) {
			if params, err = zenrpc.ConvertToObject([]string{"base", "exp"}, params); err != nil {
				return zenrpc.NewResponseError(nil, zenrpc.InvalidParams, "", err.Error())
			}
		}

		if len(params) > 0 {
			if err := json.Unmarshal(params, &args); err != nil {
				return zenrpc.NewResponseError(nil, zenrpc.InvalidParams, "", err.Error())
			}
		}

		//zenrpc:exp=2 	exponent could be empty
		if args.Exp == nil {
			var v float64 = 2
			args.Exp = &v
		}

		resp.Set(s.Pow(args.Base, args.Exp))

	case RPC.ArithService.Pi:
		resp.Set(s.Pi())

	case RPC.ArithService.SumArray:
		var args = struct {
			Array *[]float64 `json:"array"`
		}{}

		if zenrpc.IsArray(params) {
			if params, err = zenrpc.ConvertToObject([]string{"array"}, params); err != nil {
				return zenrpc.NewResponseError(nil, zenrpc.InvalidParams, "", err.Error())
			}
		}

		if len(params) > 0 {
			if err := json.Unmarshal(params, &args); err != nil {
				return zenrpc.NewResponseError(nil, zenrpc.InvalidParams, "", err.Error())
			}
		}

		//zenrpc:array=[]float64{1,2,4}
		if args.Array == nil {
			var v []float64 = []float64{1, 2, 4}
			args.Array = &v
		}

		resp.Set(s.SumArray(args.Array))

	default:
		resp = zenrpc.NewResponseError(nil, zenrpc.MethodNotFound, "", nil)
	}

	return resp
}
